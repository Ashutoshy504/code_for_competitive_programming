/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Duc
 */

#include <iostream>
#include <fstream>

#define C11

#ifdef SUBMIT
#define LOGLEVEL 0
#define NDEBUG
#else
#define LOGLEVEL 1
#endif

#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <iomanip>
#include <queue>
#include <stack>
#include <functional>
#include <sstream>
#include <deque>
#include <climits>
#include <cfloat>
#include <bitset>

#ifdef C11

#include <array>
#include <type_traits>
#include <random>
#include <unordered_set>
#include <unordered_map>
#include <memory>

#endif

#define LOG(l, x) if (l <= LOGLEVEL) cout << x << endl

#define int64 long long
#define repeat(x) for (auto repeat_var = 0; repeat_var < x; ++repeat_var)

#define for_inc(i, x) for (auto i = 0; i < x; ++i)
#define for_dec(i, x) for (auto i = x - 1; i >= 0; --i)
#define for_inc_range(i, x, y) for (auto i = x; i <= y; ++i)
#define for_dec_range(i, x, y) for (auto i = x; i >= y; --i)

#define countBit __builtin_popcount
#define countBit64 __builtin_popcountl

#define fill0(x) memset(x, 0, sizeof(x))
#define INT_INF ((int)2E9L)
#define INT64_INF ((int64)1E18L)
#define MOD 1000000007

using namespace std;

#ifndef GLOBAL_H
#define GLOBAL_H

string toYesNo(bool b) {
    return b ? "YES" : "NO";
}

#endif


template<class T>
bool binarySearchMin(const T &minIndex, const T &maxIndex, const function<bool(T)> &predicate, T &result) {
    T leftIndex = minIndex, rightIndex = maxIndex, midIndex, ret = maxIndex + 1;
    while (leftIndex <= rightIndex) {
        midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        if (predicate(midIndex)) {
            ret = midIndex;
            rightIndex = midIndex - 1;
        } else {
            leftIndex = midIndex + 1;
        }
    }
    result = ret;
    return ret != maxIndex + 1;
}

template<class T>
bool binarySearchMax(const T &minIndex, const T &maxIndex, const function<bool(T)> &predicate, T &result) {
    T leftIndex = minIndex, rightIndex = maxIndex, midIndex, ret = minIndex - 1;
    while (leftIndex <= rightIndex) {
        midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        if (predicate(midIndex)) {
            ret = midIndex;
            leftIndex = midIndex + 1;
        } else {
            rightIndex = midIndex - 1;
        }
    }
    result = ret;
    return ret != minIndex - 1;
}

bool binarySearchMaxReal(double minRange, double maxRange, double epsilon, const function<bool(double)> &predicate,
                         double &result) {
    double l = minRange, r = maxRange, m, ret = minRange - 1;
    while (r - l > epsilon) {
        m = l + (r - l) / 2;
        if (predicate(m)) {
            ret = m;
            l = m;
        } else {
            r = m;
        }
    }
    result = ret;
    return ret != minRange - 1;
}

bool binarySearchMinReal(double minRange, double maxRange, double epsilon, const function<bool(double)> &predicate,
                         double &result) {
    double l = minRange, r = maxRange, m, ret = maxRange + 1;
    while (r - l > epsilon) {
        m = l + (r - l) / 2;
        if (predicate(m)) {
            r = m;
            ret = m;
        } else {
            l = m;
        }
    }
    result = ret;
    return ret != maxRange + 1;
}

#define MAXN 200200

int n;
int a[MAXN];
pair<int, int> p[MAXN];

#define INF 1E18

bool ok(double ret) {
    double bMin = INF, bMax = -INF;
    LOG(1, "Ret " << ret);
    for_inc_range(i, 0, n - 1) {
        pair<int, int> p1 = p[i];
        pair<int, int> p2 = p[i + 1];
        if (p1.second < p2.second) {
            swap(p1, p2);
        }
        double l = p1.second - p2.second;
        double slope = (p2.first - p1.first) / l;
        bMin = min(bMin, slope + ret / l);
        bMax = max(bMax, slope - ret / l);
        LOG(1, "Slope " << i << " " << slope);
    }
    LOG(1, "Bmax " << bMax << " bMin " << bMin);
    return bMax <= bMin;
}

class TaskC {
public:
    void solve(std::istream &in, std::ostream &out) {
        in >> n;
        for_inc_range(i, 1, n) {
            in >> a[i];
        }
        a[0] = 0;
        p[0] = make_pair(0, 0);
        for_inc_range(i, 1, n) {
            a[i] = a[i - 1] + a[i];
            p[i] = make_pair(a[i], i);
        }
        sort(p, p + n + 1);

        double ret;
        binarySearchMinReal(0, 3e4, 1e-7, (function<bool(double)>) ok, ret);

        out << setiosflags(ios::fixed) << std::setprecision(12) << ret << endl;
    }
};


int main() {
    TaskC solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
