/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Duc
 */

#include <iostream>
#include <fstream>

#define C11

#ifdef SUBMIT
#define LOGLEVEL 0
#define NDEBUG
#else
#define LOGLEVEL 1
#endif

#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <queue>
#include <stack>
#include <functional>
#include <sstream>
#include <deque>
#include <climits>
#include <cfloat>
#include <bitset>

#ifdef C11

#include <array>
#include <type_traits>
#include <random>
#include <unordered_set>
#include <unordered_map>
#include <memory>

#endif

#define LOG(l, x) if (l <= LOGLEVEL) cout << x << endl

#define int64 long long
#define repeat(x) for (auto repeat_var = 0; repeat_var < x; ++repeat_var)

#define for_inc(i, x) for (auto i = 0; i < x; ++i)
#define for_dec(i, x) for (auto i = x - 1; i >= 0; --i)
#define for_inc_range(i, x, y) for (auto i = x; i <= y; ++i)
#define for_dec_range(i, x, y) for (auto i = x; i >= y; --i)

#define countBit __builtin_popcount
#define countBit64 __builtin_popcountl

#define fill0(x) memset(x, 0, sizeof(x))
#define INT_INF ((int)2E9L)
#define INT64_INF ((int64)1E18L)
#define MOD 1000000007

using namespace std;

#ifndef GLOBAL_H
#define GLOBAL_H

string toYesNo(bool b) {
    return b ? "YES" : "NO";
}

#endif


#ifndef ITERATOR_H
#define ITERATOR_H

template<class T>
class Iterator {
public:
    virtual bool hasNext() const = 0;

    virtual T next() = 0;
};

template<class T>
class Iterable {
public:
    virtual unique_ptr<Iterator<T>> iterator() const = 0;
};


template<class T, class UnaryPredicate>
bool any(const Iterable<T> &iterable, const UnaryPredicate &pred) {
    auto it = iterable.iterator();
    while (it->hasNext()) {
        if (pred(it->next())) {
            return true;
        }
    }
    return false;
}

template<class T, class UnaryPredicate>
bool all(const Iterable<T> &iterable, const UnaryPredicate &pred) {
    auto it = iterable.iterator();
    while (it->hasNext()) {
        if (!pred(it->next())) {
            return false;
        }
    }
    return true;
}

template<class T>
bool unique(const Iterable<T> &iterable) {
    auto it = iterable.iterator();
    bool first = true;
    T val;
    while (it->hasNext()) {
        T x = it->next();
        if (first) {
            val = x;
            first = false;
        } else {
            if (val != x) {
                return false;
            }
        }
    }
    return true;
}

template<class IN, class OUT>
class MapIterator : public Iterator<OUT> {
    Iterator<IN> &in;
    const function<OUT(IN)> &mapper;

public:
    MapIterator(Iterator<IN> &in, const function<OUT(IN)> &mapper) : in(in), mapper(mapper) { }

    virtual bool hasNext() const {
        return in.hasNext();
    }

    virtual OUT next() {
        return mapper(in.next());
    }
};

template<class IN, class OUT>
class MapIterable : public Iterable<OUT> {
    const Iterable<IN> &in;
    const function<OUT(IN)> &mapper;
public:
    MapIterable(const Iterable<IN> &in, const function<OUT(IN)> &mapper) : in(in), mapper(mapper) { }

    virtual unique_ptr<Iterator<OUT>> iterator() const {
        return new MapIterator<IN, OUT>(*in.iterator(), mapper);
    }
};

template<class IN, class OUT>
MapIterable<IN, OUT> mapIterable(const Iterable<IN> &iterable, const function<OUT(IN)> &mapper) {
    return MapIterable<IN, OUT>(iterable, mapper);
}

template<class T, class ITERATOR>
class StdIterator : public Iterator<T> {
    const ITERATOR &begin, &end;
    ITERATOR it;

public:
    StdIterator(const ITERATOR &begin, const ITERATOR &end) : begin(begin), end(end), it(begin) { }

    virtual bool hasNext() const {
        return it != end;
    }

    virtual T next() {
        T ret = *it;
        it++;
        return ret;
    }
};

template<class T, class ITERATOR>
class StdIterable : public Iterable<T> {
    const ITERATOR &begin, &end;
public:
    StdIterable(const ITERATOR &begin, const ITERATOR &end) : begin(begin), end(end) { }

    virtual unique_ptr<Iterator<T>> iterator() const {
        return unique_ptr<Iterator<T>>(new StdIterator<T, ITERATOR>(begin, end));
    }
};

template<class T, class ITERATOR>
StdIterable<T, ITERATOR> stdIterable(const ITERATOR &begin, const ITERATOR &end) {
    return StdIterable<T, ITERATOR>(begin, end);
};

template<class T>
T aggregate(const Iterable<T> &iterable, const function<T(T, T)> &aggregator) {
    auto it = iterable.iterator();
    bool first = true;
    T ret;
    while (it->hasNext()) {
        if (first) {
            ret = it->next();
            first = false;
        } else {
            ret = aggregator(ret, it->next());
        }
    }
    return ret;
}

template<class T>
vector<T> collect(const Iterable<T> &iterable) {
    auto it = iterable.iterator();
    vector<T> vec;
    while (it->hasNext()) {
        vec.push_back(it->next());
    }
    return vec;
}

template<class T>
T aggregateMax(const Iterable<T> &iterable) {
    return aggregate<T>(iterable, [](const T &a, const T &b) { return max(a, b); });
}

#endif

template<class T>
class InputIterator : public Iterator<T> {
    int size;
    std::istream &in;

public:
    InputIterator(std::istream &in, int size) : in(in), size(size) { }

    virtual bool hasNext() const {
        return size > 0;
    }

    virtual T next() {
        T x;
        in >> x;
        size--;
        return x;
    }
};

template<class T>
class InputIterable : public Iterable<T> {
    int size;
    std::istream &in;
public:
    InputIterable(std::istream &in, int size) : in(in), size(size) { }

    virtual unique_ptr<Iterator<T>> iterator() const {
        return unique_ptr<Iterator<T>>(new InputIterator<T>(in, size));
    }
};

template<class T>
InputIterable<T> inputIterable(std::istream &in, int size) {
    return InputIterable<T>(in, size);
}


int getMax(int a, int b) { return max(a, b); }

class TaskB {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<int> h = collect(inputIterable<int>(in, n));
        vector<int> timeTake = h;
        timeTake[0] = 1;
        timeTake[n - 1] = 1;
        for_inc_range(i, 1, n - 1) {
            timeTake[i] = min(timeTake[i], timeTake[i - 1] + 1);
        }
        for_dec_range(i, n - 2, 0) {
            timeTake[i] = min(timeTake[i], timeTake[i + 1] + 1);
        }
        out << aggregateMax(stdIterable<int>(timeTake.begin(), timeTake.end())) << endl;
    }

};


int main() {
    TaskB solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
