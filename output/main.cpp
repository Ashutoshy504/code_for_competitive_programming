/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Duc
 */

#include <iostream>
#include <fstream>

#define C11

#ifdef SUBMIT
#define LOGLEVEL 0
#define NDEBUG
#else
#define LOGLEVEL 1
#endif

#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <queue>
#include <stack>
#include <functional>
#include <sstream>
#include <deque>
#include <climits>
#include <cfloat>
#include <bitset>

#ifdef C11

#include <array>
#include <type_traits>
#include <random>
#include <unordered_set>
#include <unordered_map>

#endif

#define LOG(l, x) if (l <= LOGLEVEL) cout << x << endl

#define int64 long long
#define repeat(x) for (auto repeat_var = 0; repeat_var < x; ++repeat_var)

#define for_inc(i, x) for (auto i = 0; i < x; ++i)
#define for_dec(i, x) for (auto i = x - 1; i >= 0; --i)
#define for_inc_range(i, x, y) for (auto i = x; i <= y; ++i)
#define for_dec_range(i, x, y) for (auto i = x; i >= y; --i)

#define countBit __builtin_popcount
#define countBit64 __builtin_popcountl

#define fill0(x) memset(x, 0, sizeof(x))
#define INT_INF ((int)2E9L)
#define INT64_INF ((int64)1E18L)
#define MOD 1000000007

using namespace std;

#ifndef GLOBAL_H
#define GLOBAL_H

string toYesNo(bool b) {
    return b ? "YES" : "NO";
}

#endif


template<class T>
class BinaryIndexedTree {
    vector<T> val;
    int n, minIndex, maxIndex;

public:
    BinaryIndexedTree() { }

    BinaryIndexedTree(int n) : BinaryIndexedTree(1, n) { }

    BinaryIndexedTree(int minIndex, int maxIndex) {
        init(minIndex, maxIndex);
    }

    void init(int minIndex, int maxIndex) {
        this->minIndex = minIndex;
        this->maxIndex = maxIndex;
        this->n = maxIndex - minIndex + 1;
        val.resize(n + 1);
    }

    void add(int i, int v) {
        i = i - minIndex + 1;
        for (; i <= n; i += i & -i) {
            val[i] += v;
        }
    }

    T sum(int i) {
        i = i - minIndex + 1;
        if (i <= 0) return 0;
        if (i > n) i = n;
        T s = 0;
        for (; i > 0; i -= i & -i)
            s += val[i];
        return s;
    }

    T sum(int i1, int i2) { return sum(i2) - sum(i1 - 1); }
};

template<class T>
class BinaryIndexedTree3D {
    vector<vector<vector<T>>> val;
    int n, minIndex, maxIndex;

public:
    BinaryIndexedTree3D(int n) : BinaryIndexedTree3D(1, n) { }

    BinaryIndexedTree3D(int minIndex, int maxIndex) {
        this->minIndex = minIndex;
        this->maxIndex = maxIndex;
        this->n = maxIndex - minIndex + 1;
        val.resize(n + 1);
        for_inc_range(i, 1, n) {
            val[i].resize(n + 1);
            for_inc_range(j, 1, n) {
                val[i][j].resize(n + 1);
            }
        }
    }

    void add(int x0, int y0, int z0, int v) {
        x0 = x0 - minIndex + 1;
        y0 = y0 - minIndex + 1;
        z0 = z0 - minIndex + 1;
        for (int x = x0; x <= n; x += x & -x)
            for (int y = y0; y <= n; y += y & -y)
                for (int z = z0; z <= n; z += z & -z) {
                    val[x][y][z] += v;
                }
    }

    T sum(int x0, int y0, int z0) {
        x0 = x0 - minIndex + 1;
        y0 = y0 - minIndex + 1;
        z0 = z0 - minIndex + 1;
        if (x0 <= 0 || y0 <= 0 || z0 <= 0) return 0;
        if (x0 > n) x0 = n;
        if (y0 > n) y0 = n;
        if (z0 > n) z0 = n;
        T s = 0;
        for (int x = x0; x > 0; x -= x & -x)
            for (int y = y0; y > 0; y -= y & -y)
                for (int z = z0; z > 0; z -= z & -z)
                    s += val[x][y][z];
        return s;
    }

    T sum(int x1, int y1, int z1, int x2, int y2, int z2) {
        return sum(x2, y2, z2) - sum(x1 - 1, y2, z2) - sum(x2, y1 - 1, z2) - sum(x2, y2, z1 - 1)
               + sum(x1 - 1, y1 - 1, z2) + sum(x2, y1 - 1, z1 - 1) + sum(x1 - 1, y2, z1 - 1) -
               sum(x1 - 1, y1 - 1, z1 - 1);
    }
};

template<class T>
class RangeUpdateArray {
    BinaryIndexedTree<T> tree;
    int minIndex, maxIndex;

public:
    RangeUpdateArray() { }

    RangeUpdateArray(int n) {
        init(1, n);
    }

    RangeUpdateArray(int minIndex, int maxIndex) {
        init(minIndex, maxIndex);
    }

    void init(int minIndex, int maxIndex) {
        this->minIndex = minIndex;
        this->maxIndex = maxIndex;
        tree.init(minIndex, maxIndex);
    }

    // Do a[k] = a[k] + v for i <= k <= j
    // O(logn)
    void add(int i, int j, T v) {
        assert(minIndex <= i && i <= j && j <= maxIndex);
        if (j < maxIndex) {
            tree.add(j + 1, -v);
        }
        tree.add(i, v);
    }

    // Return a[i] in O(logn)
    T get(int i) {
        assert (minIndex <= i && i <= maxIndex);
        return tree.sum(i);
    }

    const T operator[](int i) {
        return get(i);
    }
};


template<class T>
bool binarySearchMin(const T &minIndex, const T &maxIndex, const function<bool(T)> &predicate, T &result) {
    T leftIndex = minIndex, rightIndex = maxIndex, midIndex, ret = maxIndex + 1;
    while (leftIndex <= rightIndex) {
        midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        if (predicate(midIndex)) {
            ret = midIndex;
            rightIndex = midIndex - 1;
        } else {
            leftIndex = midIndex + 1;
        }
    }
    result = ret;
    return ret != maxIndex + 1;
}

template<class T>
bool binarySearchMax(const T &minIndex, const T &maxIndex, const function<bool(T)> &predicate, T &result) {
    T leftIndex = minIndex, rightIndex = maxIndex, midIndex, ret = minIndex - 1;
    while (leftIndex <= rightIndex) {
        midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        if (predicate(midIndex)) {
            ret = midIndex;
            leftIndex = midIndex + 1;
        } else {
            rightIndex = midIndex - 1;
        }
    }
    result = ret;
    return ret != minIndex - 1;
}

bool binarySearchMaxReal(double minRange, double maxRange, double epsilon, const function<bool(double)> &predicate,
                         double &result) {
    double l = minRange, r = maxRange, m, ret = minRange - 1;
    while (r - l > epsilon) {
        m = l + (r - l) / 2;
        if (predicate(m)) {
            ret = m;
            l = m;
        } else {
            r = m;
        }
    }
    result = ret;
    return ret != minRange - 1;
}

bool binarySearchMinReal(double minRange, double maxRange, double epsilon, const function<bool(double)> &predicate,
                         double &result) {
    double l = minRange, r = maxRange, m, ret = maxRange + 1;
    while (r - l > epsilon) {
        m = l + (r - l) / 2;
        if (predicate(m)) {
            l = m;
            ret = m;
        } else {
            r = m;
        }
    }
    result = ret;
    return ret != maxRange + 1;
}

class IOI07Sails {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        vector<pair<int, int>> a;
        in >> n;
        int maxH = 0;
        repeat(n) {
            int h, k;
            in >> h >> k;
            a.push_back(make_pair(h, k));
            maxH = max(maxH, h);
        }

        sort(a.begin(), a.end());

        int curH = 0;
        RangeUpdateArray<int> s(0, maxH - 1);
        for (auto &p: a) {
            int h = p.first, k = p.second;
            curH = h;
            int i = curH - k;
            if (i == 0 || s[i] != s[i - 1]) {
                s.add(i, curH - 1, 1);
            } else {
                int x = s[i];
                int ret;
                if (binarySearchMin<int>(i, curH - 1, [&](midIndex) { return s[midIndex] < x; }, ret)) {
                    s.add(ret, curH - 1, 1);
                    k -= (curH - ret);
                }
                if (binarySearchMin<int>(0, i, [&](int midIndex) { return s[midIndex] == x; }, ret)) {
                    s.add(ret, ret + k - 1, 1);
                }
            }
        }

        int64 ret = 0;
        for (int i = 0; i < maxH; ++i) {
            int x = s[i];
            ret += (int64) x * (x - 1) / 2;
        }

        out << ret << endl;
    }
};


int main() {
    IOI07Sails solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
