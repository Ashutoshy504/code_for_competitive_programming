/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Duc
 */

#include <iostream>
#include <fstream>

#define IO_USE_CSTDIO

#define C11

#ifdef SUBMIT
#define LOGLEVEL 0
#define NDEBUG
#else
#define LOGLEVEL 1
#endif

#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <iomanip>
#include <queue>
#include <stack>
#include <functional>
#include <sstream>
#include <deque>
#include <climits>
#include <cfloat>
#include <bitset>

#ifdef C11

#include <array>
#include <type_traits>
#include <random>
#include <unordered_set>
#include <unordered_map>
#include <memory>

#endif

#define LOG(l, x) if (l <= LOGLEVEL) cout << x << endl

#define int64 long long
#define repeat(x) for (auto repeat_var = 0; repeat_var < x; ++repeat_var)

#define for_inc(i, x) for (auto i = 0; i < x; ++i)
#define for_dec(i, x) for (auto i = x - 1; i >= 0; --i)
#define for_inc_range(i, x, y) for (auto i = x; i <= y; ++i)
#define for_dec_range(i, x, y) for (auto i = x; i >= y; --i)

#define countBit __builtin_popcount
#define countBit64 __builtin_popcountl

#define fill0(x) memset(x, 0, sizeof(x))
#define INT_INF ((int)2E9L)
#define INT64_INF ((int64)1E18L)
#define MOD 1000000007

using namespace std;

#ifndef GLOBAL_H
#define GLOBAL_H

#ifndef NDEBUG
#   define ASSERT(condition, message) \
    do { \
        if (! (condition)) { \
            std::cerr << "Assertion `" #condition "` failed in " << __FILE__ \
                      << " line " << __LINE__ << ": " << message << std::endl; \
            assert(false); \
        } \
    } while (false)
#else
#   define ASSERT(condition, message) do { } while (false)
#endif

string toYesNo(bool b) {
    return b ? "YES" : "NO";
}

#endif


#ifndef H_SCANNER
#define H_SCANNER

#ifdef IO_USE_CSTDIO

class Scanner {
    std::istream &in;

public:
    Scanner(std::istream &in) : in(in) {
    }

    Scanner &operator>>(int &result) {
        scanf("%d", &result);
        return *this;
    }

    Scanner &operator>>(int64 &result) {
        scanf("%I64d", &result);
        return *this;
    }
};

class Writer {
    std::ostream &out;

public:
    Writer(std::ostream &out) : out(out) {
    }

    Writer &operator<<(int value) {
        printf("%d", value);
        return *this;
    }

    Writer &operator<<(string &value) {
        printf("%s", value.c_str());
        return *this;
    }

    Writer &operator<<(const char *value) {
        printf("%s", value);
        return *this;
    }

    Writer &newline() {
        printf("\n");
        return *this;
    }
};

#else

class Scanner {
    std::istream &in;

public:
    Scanner(std::istream &in) : in(in) {
    }

    template <class T> Scanner& operator >> (T &result) {
        in >> result;
        return *this;
    }
};

class Writer {
    std::ostream &out;

public:
    Writer(std::ostream &out) : out(out) {
    }

    template <class T> Writer& operator << (T value) {
        out << value;
        return *this;
    }

    Writer& newline() {
        out << endl;
        return *this;
    }
};
#endif

#endif


#ifndef BINARY_SEARCH_H
#define BINARY_SEARCH_H

/*
 * Used to find min(x | predicate(x)), if predicate(x) is .. 0, 0, 0, 1, 1, 1, ...
 */
template<class T>
bool binarySearchMin(const T &minIndex, const T &maxIndex, const function<bool(T)> &predicate, T &result) {
    T leftIndex = minIndex, rightIndex = maxIndex, midIndex, ret = maxIndex + 1;
    while (leftIndex <= rightIndex) {
        midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        if (predicate(midIndex)) {
            ret = midIndex;
            rightIndex = midIndex - 1;
        } else {
            leftIndex = midIndex + 1;
        }
    }
    result = ret;
    return ret != maxIndex + 1;
}

/*
 * Used to find max(x | predicate(x)), if predicate(x) is .. 1, 1, 1, 0, 0, 0, ...
 */
template<class T>
bool binarySearchMax(const T &minIndex, const T &maxIndex, const function<bool(T)> &predicate, T &result) {
    T leftIndex = minIndex, rightIndex = maxIndex, midIndex, ret = minIndex - 1;
    while (leftIndex <= rightIndex) {
        midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        if (predicate(midIndex)) {
            ret = midIndex;
            leftIndex = midIndex + 1;
        } else {
            rightIndex = midIndex - 1;
        }
    }
    result = ret;
    return ret != minIndex - 1;
}

/*
 * Used to find max(x | predicate(x)), if predicate(x) is continuously .. 1, 1, 1, 0, 0, 0, ...
 */
bool binarySearchMaxReal(double minRange, double maxRange, double epsilon, const function<bool(double)> &predicate,
                         double &result) {
    double l = minRange, r = maxRange, m, ret = minRange - 1;
    while (r - l > epsilon) {
        m = l + (r - l) / 2;
        if (predicate(m)) {
            ret = m;
            l = m;
        } else {
            r = m;
        }
    }
    result = ret;
    return ret != minRange - 1;
}

/*
 * Used to find min(x | predicate(x)), if predicate(x) is continuously .. 0, 0, 0, 1, 1, 1, ...
 */
bool binarySearchMinReal(double minRange, double maxRange, double epsilon, const function<bool(double)> &predicate,
                         double &result) {
    double l = minRange, r = maxRange, m, ret = maxRange + 1;
    while (r - l > epsilon) {
        m = l + (r - l) / 2;
        if (predicate(m)) {
            r = m;
            ret = m;
        } else {
            l = m;
        }
    }
    result = ret;
    return ret != maxRange + 1;
}

/*
 * Used to find the intersection of an increasing and a deceasing function
 */
bool binarySearchIntersection(double minRange, double maxRange, double epsilon,
                              const function<double(double)> &increasing, const function<double(double)> &decreasing,
                              double &intersection) {
    return binarySearchMinReal(minRange, maxRange, epsilon, [&](double x) {
        //LOG(1, x << " " << increasing(x) << " " << decreasing(x));
        return increasing(x) >= decreasing(x);
    }, intersection);
}

#endif

class TaskA {
public:
    void solve(std::istream &inStream, std::ostream &outStream) {
        Scanner in(inStream);
        Writer out(outStream);

        int64 n;
        in >> n;

        int64 p;
        function<bool(int64)> pred = [&](int64 p) { return (p * (p - 1) / 2 + 1) <= n; };
        binarySearchMax(0LL, (int64) 1E8L, pred, p);

        out << n - (p * (p - 1) / 2);
    }
};


int main() {
    TaskA solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
